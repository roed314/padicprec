mu = NF(P)(d) - NF(P)(d-1)

Remark:
If P becomes c*P, then
 . A_i becomes c*A_i
 . B_i and V_i remain unchanged

Set phi = NF(P) on [0,d]
and extend it to [0,infty] by letting
  phi(x) = mu*(x-d) + phi(d)

For a polynomial Q, set:
  b_phi(Q) = min_{x in [0,n]}  (NF(Q)(x) - phi(x))
  b_mu(Q)  = min_{x in [0,n]}  (NF(Q)(x) - mu*x)
Note b_phi(Q) <= b_mu(Q)

Define also:
  Epi(phi) = epigraph of phi
  C = convex cone generated by (0,1) and (1,mu)
Then b_phi(Q) is the largest value for which NP(Q) is included in the 
translation of Epi(phi) of vector (0, b_phi(Q)). Same with b_mu(Q) and C.

We normalize P such that b_phi(P) = b_mu(P) = 0

Lemma: 
Q_1, Q_2 are polynomials. Then:
 1) b_phi(Q_1+Q_2) = min(b_phi(Q_1),b_phi(Q_2))
 2) b_phi(Q_1*Q_2) >= b_phi(Q_1) + b_mu(Q_2) >= b_phi(Q_1) + b_phi(Q_2)
Q, A polynomials such that NF~(A) = phi~. Then:
 3) b_phi(Q % A) >= b_phi(Q)
 4) b_mu(Q // A) >= b_phi(Q)

Proof:
1) is clear.
2) By definition, we have:
     NP(Q_1) \subset t_1(Epi(phi))
     NP(Q_2) \subset t_2(C)
   where t_i is the translation of vector (0, b_mu(Q_i)).
   Thus:
     NP(Q_1*Q_2) \subset t(Epi(phi) + C)
   where t is the translation of vector (0, b_mu(Q_1) + b_mu(Q_2)).
   But Epi(phi) + C = Epi(phi) and we are done.
3) and 4) follow from Theorem 3.2

Induction hypothesis:
 . b_phi(A_i) = 0
 . b_phi(V_i) >= 0
 . b_phi(R_i) >= lambda_i
 . b_phi(T_i) >= lambda_i
 . b_phi(S_i) >= 0

Assume lambda_i > 0 
(we need a slightly different argument for i=0)

* NF(A_(i+1)) = NF(A_i)
* B_(i+1) = P // A_(i+1)
     => b_mu(B_(i+1)) >= 0  (because b_phi(P) >= 0)
* b_phi(R_i B_(i+1)) >= lambda_i
     => b_phi(Delta S_i) >= lambda_i
    and b_mu(Delta B_i) >= lambda_i

* b_phi(B_i R_i) >= lambda_i
  b_phi(S_i T_i) >= lambda_i
     => b_phi(S_i) >= lambda_i
     => b_phi(S_(i+1)) >= lambda_i

* b_phi(V_i T_i) >= lambda_i
  b_phi(V_i^2 Delta B_i) >= lambda_i
     => b_phi(Delta V_i) >= lambda_i

* b_phi(T_i) >= lambda_i
  b_phi(V_i S_i) >= lambda_i
     => b_mu(V_i S_i // A_i) >= lambda_i
     => b_mu(1 - Q_i) >= lambda_i

* b_phi(Delta V_i) >= lambda_i
  b_phi(S_(i+1)) >= lambda_i
  b_mu(1 - Q_i) >= lambda_i
  b_phi(R_i) >= lambda_i
     => b_phi(R_(i+1)) >= 2*lambda_i

* b_phi(T_i) >= lambda_i
  b_phi(V_i Delta B_i) => lambda_i
     => b_phi(T_(i+1)) >= 2*lambda_i

And induction goes.
